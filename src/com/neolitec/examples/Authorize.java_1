package org.web.servlets.filters;

import java.io.IOException;
import java.util.Hashtable;

//import java.util.Scanner;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import javax.naming.Context;
import javax.naming.NamingException;
import javax.naming.directory.DirContext;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.sun.jndi.ldap.LdapCtxFactory;

public class Authorize implements Filter {

	String ldapHostname;
	String ldapDomancomponent;
	String ldapUsername;
	String ldapPassword;
	
	String loginUrlPath;
	
	@Override
	public void init(FilterConfig filterConfiguration) throws ServletException {
		ldapHostname = filterConfiguration.getInitParameter("ldap-hostname");
		ldapDomancomponent = filterConfiguration.getInitParameter("ldap-domancomponent");

		System.out.println("Authorize filter created having with ldap server '" + ldapHostname + "'.");

	}

	private boolean performLdapAuthentication(String username, String password) {
		boolean authenticationGranted = false;
		
		String ldapContext = String.format("ldap://%s", ldapHostname);
		
		Hashtable<String, String> ldapUserProperties = new Hashtable<String, String>();
		ldapUserProperties.put(Context.SECURITY_PRINCIPAL, username);
		ldapUserProperties.put(Context.SECURITY_CREDENTIALS, password);

		try {
			@SuppressWarnings("unused")
			DirContext directoryContext = LdapCtxFactory.getLdapCtxInstance(ldapContext, ldapUserProperties);
			authenticationGranted = true;
		} catch (NamingException e) {
				System.out.println("Authentication failed!");
		}
		
		return authenticationGranted;
	}
	
	@Override
	public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain servletFilterChain)
			throws IOException, ServletException {
		
		System.out.println("Performing authorization...");

		boolean authenticationGranted = false;
		String redirectUri = null;
		
		HttpServletResponse response = (HttpServletResponse) servletResponse;
		HttpServletRequest request = (HttpServletRequest) servletRequest;
		HttpSession session = request.getSession();

		// perform authentication only if user is not previously authorized
		String authorizedUsername = (String) session.getAttribute("authorizedUsername");
		if (authorizedUsername != null) {
			System.out.println("User '" + authorizedUsername + "' was previously authorized!");
			authenticationGranted = true;
		} else {
			String scUsername = "";
			String scPassword = "";
			BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
			System.out.println("Enter username: ");
			scUsername = input.readLine();
			System.out.println("Enter password: ");
			scPassword = input.readLine();
			String ldapBind = "CN=" + scUsername.replaceAll("\\.", " ") + "," + ldapDomancomponent;
			//String ldapBind = scUsername;

			// authorize user with credentials provided from initial parameters
			if (performLdapAuthentication(ldapBind, scPassword)) {
				authorizedUsername = ldapBind;
				session.setAttribute("authorizedUsername", ldapBind);
				authenticationGranted = true;

				System.out.println("User '" + scUsername + "' is now authorized!");
			} 
			
		}

		if (authenticationGranted) {
			servletFilterChain.doFilter(servletRequest, servletResponse);
		} else {
			if (redirectUri == null) {
				response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
			}
		}
	}

	@Override
	public void destroy() {
		System.out.println("Authorize filter destroyed.");
	}
}
